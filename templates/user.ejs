<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Hind:wght@300;400;500;600;700&display=swap');
    </style>
    <link rel="stylesheet" type="text/css" href="/css/user.css" />
    <link rel="stylesheet" type="text/css" href="/css/test.css" />
</head>
<body>
    <div class="header">
        <a href="/">
          Home  
        </a>
        <a href="/createPost">
            Create a Post
        </a>
        <div id="search-box">
            <input type="text" id="search" placeholder="Search">
            <div id="results">

            </div>
        </div>
        
        <script>
            const searchBar = document.getElementById("search");
            let timer;
            searchBar.addEventListener(("input"), async (e) => {
                const name = searchBar.value;
                if (!(name.length > 2)) return;
                clearTimeout(timer);
                timer = setTimeout(async () => {
                    
                    const res = await fetch(`/user/query/${name}`);
                    const names = await res.json();
                    const results = document.getElementById("results");
                    results.innerHTML = "";
                    if (names.length == 0){
                        console.log(names);
                        results.innerHTML = `<div class="search-result">No results</div>`;
                    }
                    names.forEach((x) => {
                        results.innerHTML += `<a  href="/user/${x.name}"><div class="search-result">${x.name}</div></a>`
                    })
                }, 700);
                
            });
        </script>
    </div>    
    <div class="user-header">
        <div>
            <%- name %>
        </div>
        <% if(!isUser){ %>
            <button class="follower-button" id="follow-status" onclick="follow()">
                Follow
            </button>
         <% } %>
        
        <div >Followers<div id="followerCount"><%- followerCount%></div></div>
        <div>Following<div id="followingCount"><%- followingCount%></div></div>
    </div>
    

    <div id="map"></div>
    <div>
        <div class="title-container">
                <div class="button-container">
                    <div class="arrow-container"onclick="previousPost()">
                        <div  class="arrow left"></div>
                        <div>Previous post</div>
                    </div>
                    
                    <div class="arrow-container" onclick="nextPost()">
                        <div >Next post</div>
                        <div class="arrow right"></div>
                    </div>
                </div>
        </div>
        <div class="user-links">
            <a id="post-link">
                <div id="post-title">
                Title
                </div>
            </a>
        </div>
        
        
        <div class="entry">
            <div>
                <div class="entry-title" id="title"></div>
                <div class="entry-desc" id="desc"></div>
            </div>
            
            <div class="button-container">
                <div class="arrow-container"onclick="previousEntry()">
                    <div  class="arrow left"></div>
                    <div>Previous entry</div>
                </div>
                <div class="arrow-container" onclick="nextEntry()">
                    <div >Next entry</div>
                    <div class="arrow right"></div>
                </div>
                
            </div>
        </div>
    </div>
    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBt7zxTCL2Sma9O1gQPpgqbgVGrF2ZmbFg&callback=initMap">
    </script>

    <script>
        let map;
        let posts = <%- posts %>;
        let points = [];
        //maybe change this isFollowing IDK
        let following = <%- following %>;
        let name = "<%- name %>";
        let followerCount = <%- followerCount%>;
        let pointIdx = 0;
        let postIdx = 0;
        let currentPoint = posts[postIdx].entries[pointIdx];
        

        followButtonStatus();
        if (posts.length > 0){
            points = posts[0];
        }

        
        async function initMap() {
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
            
            map = new google.maps.Map(
                document.getElementById('map'), { zoom: 12, 
                    center: {lat: 38.989697, lng: -76.937759},
                    mapId: '835c17c142c9e675'});
            
            let paths = [];      
            posts.forEach((x, parentIdx) => {
                let path = []
                x.entries.forEach((entry, idx) => {
                    path.push({lat: entry.lat, lng: entry.lng})
                    placeMarker({lat: entry.lat, lng: entry.lng}, entry.title, idx, parentIdx);
                });
                paths.push(path);
            });
            updateView();
                function placeMarker(location, title, idx, parentIdx) {
                    const pinBackground = new google.maps.marker.PinElement({
                        background: "#FFFFFF",
                        borderColor: "#000000",
                        glyphColor: "#000000"
                    });
                    let marker = new google.maps.marker.AdvancedMarkerElement({
                        position: location, 
                        map: map,
                        title: title,
                        content: pinBackground.element,
                    });
                    marker.parentIdx = parentIdx;
                    marker.idx = idx;
                    const infoWindow = new google.maps.InfoWindow();
                    marker.addListener("click", ({ domEvent, latLng }) => {
                        infoWindow.close();
                        postIdx = marker.parentIdx;
                        pointIdx = marker.idx;
                        updateView();
                        infoWindow.setContent(marker.title);
                        infoWindow.open(marker.map, marker);
                        
                    });     
                     
            }
            paths.forEach((x, idx) => {
                const newPath = new google.maps.Polyline({
                    path: x,
                    geodesic: true,
                    strokeColor: "#000000",
                    strokeOpacity: 1.0,
                    strokeWeight: 4,
                })
                newPath.setMap(map);
            });
            
        }
        //update viewed list
        function updateView(){
            const entryTitle = document.getElementById("title");
            const entryDesc = document.getElementById("desc");
            const postTitle = document.getElementById("post-title");
            const postLink = document.getElementById("post-link");
            const userLink = document.getElementById("user-link");
            currentPoint = posts[postIdx].entries[pointIdx];
            map.panTo({lat: currentPoint.lat, lng: currentPoint.lng});
            entryDesc.innerText = currentPoint.desc;
            entryTitle.innerText = currentPoint.title;
            postTitle.innerText = posts[postIdx].title
            postLink.href = `/post/${posts[postIdx].identifier}`
        }
        function nextPost(){
            if (postIdx < posts.length - 1){
                postIdx += 1;
                pointIdx = 0;
                updateView();
            }
            
        }

        function previousPost(){
            if (postIdx > 0){
                postIdx -= 1;
                pointIdx = 0;
                updateView();
            }
            
        }



        function nextEntry(){
            if (pointIdx < posts[postIdx].entries.length - 1){
                pointIdx += 1;
                updateView();
            }
            
        }

        function previousEntry(){
            if (pointIdx > 0){
                pointIdx -= 1;
                updateView();
            }
            
        }

        async function follow(){
            const followerDiv = document.getElementById("followerCount");
            if (following){
                //unfollow
                followerCount -= 1
                followerDiv.innerText = followerCount;
                const res = await fetch('/unfollow', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                    body: JSON.stringify({name}),
                });
                let json = await res.json();
            } else {
                followerCount += 1
                followerDiv.innerText = followerCount;
                const res = await fetch('/follow', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({name}),
            });
                //follow
                let json = await res.json();
            }
            following = !following;
            followButtonStatus();
        }
        //doing this because I dont like ejs and this can just be ran on init to determine following button status
        function followButtonStatus(){
            const followButton = document.getElementById("follow-status");
            if (following){ 
                followButton.innerText = "Unfollow";
                followButton.className = "follower-button followed"
            } else {
                followButton.innerText = "Follow";
                followButton.className = "follower-button not-followed"

            }
            
        }
    </script>
    
</body>
</html>